// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AuditLogListRequestSortOrder.
const (
	AuditLogListRequestSortOrderAsc  AuditLogListRequestSortOrder = "asc"
	AuditLogListRequestSortOrderDesc AuditLogListRequestSortOrder = "desc"
)

// Defines values for PayoutListRequestSortOrder.
const (
	PayoutListRequestSortOrderAsc  PayoutListRequestSortOrder = "asc"
	PayoutListRequestSortOrderDesc PayoutListRequestSortOrder = "desc"
)

// Defines values for TransferApprovalRequestAction.
const (
	Approve TransferApprovalRequestAction = "approve"
	Reject  TransferApprovalRequestAction = "reject"
)

// Defines values for UpdatePayoutRequestRecordsStatus.
const (
	UpdatePayoutRequestRecordsStatusCompleted  UpdatePayoutRequestRecordsStatus = "completed"
	UpdatePayoutRequestRecordsStatusFailed     UpdatePayoutRequestRecordsStatus = "failed"
	UpdatePayoutRequestRecordsStatusPending    UpdatePayoutRequestRecordsStatus = "pending"
	UpdatePayoutRequestRecordsStatusProcessing UpdatePayoutRequestRecordsStatus = "processing"
)

// Defines values for UpdatePayoutRequestStatus.
const (
	UpdatePayoutRequestStatusCompleted  UpdatePayoutRequestStatus = "completed"
	UpdatePayoutRequestStatusFailed     UpdatePayoutRequestStatus = "failed"
	UpdatePayoutRequestStatusPending    UpdatePayoutRequestStatus = "pending"
	UpdatePayoutRequestStatusProcessing UpdatePayoutRequestStatus = "processing"
)

// Defines values for UserListRequestSortOrder.
const (
	UserListRequestSortOrderAsc  UserListRequestSortOrder = "asc"
	UserListRequestSortOrderDesc UserListRequestSortOrder = "desc"
)

// Defines values for ListNotificationsParamsSortOrder.
const (
	ListNotificationsParamsSortOrderAsc  ListNotificationsParamsSortOrder = "asc"
	ListNotificationsParamsSortOrderDesc ListNotificationsParamsSortOrder = "desc"
)

// Defines values for ListPayinFileGroupsParamsSortOrder.
const (
	ListPayinFileGroupsParamsSortOrderAsc  ListPayinFileGroupsParamsSortOrder = "asc"
	ListPayinFileGroupsParamsSortOrderDesc ListPayinFileGroupsParamsSortOrder = "desc"
)

// Defines values for ListPayinFilesParamsSortOrder.
const (
	ListPayinFilesParamsSortOrderAsc  ListPayinFilesParamsSortOrder = "asc"
	ListPayinFilesParamsSortOrderDesc ListPayinFilesParamsSortOrder = "desc"
)

// Defines values for ListPaypayPayinDetailsParamsSortOrder.
const (
	ListPaypayPayinDetailsParamsSortOrderAsc  ListPaypayPayinDetailsParamsSortOrder = "asc"
	ListPaypayPayinDetailsParamsSortOrderDesc ListPaypayPayinDetailsParamsSortOrder = "desc"
)

// Defines values for ListPaypayPayinSummaryParamsSortOrder.
const (
	ListPaypayPayinSummaryParamsSortOrderAsc  ListPaypayPayinSummaryParamsSortOrder = "asc"
	ListPaypayPayinSummaryParamsSortOrderDesc ListPaypayPayinSummaryParamsSortOrder = "desc"
)

// Defines values for ListPaypayPayinTransactionsParamsSortOrder.
const (
	ListPaypayPayinTransactionsParamsSortOrderAsc  ListPaypayPayinTransactionsParamsSortOrder = "asc"
	ListPaypayPayinTransactionsParamsSortOrderDesc ListPaypayPayinTransactionsParamsSortOrder = "desc"
)

// Defines values for ListTransferRequestsParamsSortOrder.
const (
	ListTransferRequestsParamsSortOrderAsc  ListTransferRequestsParamsSortOrder = "asc"
	ListTransferRequestsParamsSortOrderDesc ListTransferRequestsParamsSortOrder = "desc"
)

// Defines values for ListTransferRequestsParamsReconciliationFilters.
const (
	N1 ListTransferRequestsParamsReconciliationFilters = 1
	N2 ListTransferRequestsParamsReconciliationFilters = 2
	N3 ListTransferRequestsParamsReconciliationFilters = 3
)

// Defines values for ListTransferTransactionsParamsSortOrder.
const (
	ListTransferTransactionsParamsSortOrderAsc  ListTransferTransactionsParamsSortOrder = "asc"
	ListTransferTransactionsParamsSortOrderDesc ListTransferTransactionsParamsSortOrder = "desc"
)

// Defines values for ListVirtualAccountsParamsSortOrder.
const (
	ListVirtualAccountsParamsSortOrderAsc  ListVirtualAccountsParamsSortOrder = "asc"
	ListVirtualAccountsParamsSortOrderDesc ListVirtualAccountsParamsSortOrder = "desc"
)

// Account defines model for Account.
type Account struct {
	BaseDate         string `json:"baseDate"`
	BaseTime         string `json:"baseTime"`
	RaAccountNumber  string `json:"raAccountNumber"`
	RaBranchCode     string `json:"raBranchCode"`
	RaBranchNameKana string `json:"raBranchNameKana"`
	RaHolderName     string `json:"raHolderName"`
	RaId             string `json:"raId"`
}

// AozoraCallbackRequest defines model for AozoraCallbackRequest.
type AozoraCallbackRequest struct {
	// Code Authorization code from GMO Aozora Net Bank
	Code string `json:"code"`

	// State State parameter for verification
	State string `json:"state"`
}

// AozoraConnectResponse defines model for AozoraConnectResponse.
type AozoraConnectResponse struct {
	// AuthUrl Authorization URL for GMO Aozora Net Bank connection
	AuthUrl string `json:"auth_url"`

	// IsConnected Whether the user is already connected to GMO Aozora Net Bank
	IsConnected bool `json:"is_connected"`
}

// ApprovalInfo defines model for ApprovalInfo.
type ApprovalInfo struct {
	// ApprovalStages List of approval stages
	ApprovalStages []ApprovalStage `json:"approval_stages"`

	// ApprovalStatus Approval status
	ApprovalStatus   int              `json:"approval_status"`
	ApprovalWorkflow ApprovalWorkflow `json:"approval_workflow"`

	// Id Approval ID
	Id int `json:"id"`
}

// ApprovalStage defines model for ApprovalStage.
type ApprovalStage struct {
	// ApprovalId Approval ID
	ApprovalId int `json:"approval_id"`

	// ApprovalResult Approval result
	ApprovalResult int `json:"approval_result"`

	// ApprovalWorkflowStageId Approval workflow stage ID
	ApprovalWorkflowStageId int   `json:"approval_workflow_stage_id"`
	Approver                *User `json:"approver,omitempty"`

	// ApproverId Approver user ID
	ApproverId int `json:"approver_id"`

	// CreatedAt Created timestamp
	CreatedAt string `json:"created_at"`

	// Id Approval stage ID
	Id int `json:"id"`

	// Note Approval notes
	Note string `json:"note"`

	// UpdatedAt Updated timestamp
	UpdatedAt string `json:"updated_at"`
}

// ApprovalWorkflow defines model for ApprovalWorkflow.
type ApprovalWorkflow struct {
	// ApprovalWorkflowStages List of workflow stages
	ApprovalWorkflowStages []ApprovalWorkflowStage `json:"approval_workflow_stages"`

	// CreatedAt Created timestamp
	CreatedAt string `json:"created_at"`

	// Id Approval workflow ID
	Id int `json:"id"`

	// Name Workflow name
	Name string `json:"name"`

	// UpdatedAt Updated timestamp
	UpdatedAt string `json:"updated_at"`
}

// ApprovalWorkflowStage defines model for ApprovalWorkflowStage.
type ApprovalWorkflowStage struct {
	// ApproverRoleId Approver role ID
	ApproverRoleId int `json:"approver_role_id"`

	// CreatedAt Created timestamp
	CreatedAt string `json:"created_at"`

	// Id Approval workflow stage ID
	Id int `json:"id"`

	// Level Approval level
	Level int `json:"level"`

	// Note Stage notes
	Note string `json:"note"`

	// StageName Stage name
	StageName string `json:"stage_name"`

	// UpdatedAt Updated timestamp
	UpdatedAt string `json:"updated_at"`

	// WorkflowId Workflow ID
	WorkflowId int `json:"workflow_id"`
}

// AuditLog defines model for AuditLog.
type AuditLog struct {
	AuditLogType  int    `json:"audit_log_type"`
	CreatedAt     string `json:"created_at"`
	Description   string `json:"description"`
	Id            int    `json:"id"`
	IpAddress     string `json:"ip_address"`
	PayinId       *int   `json:"payin_id"`
	PayoutId      *int   `json:"payout_id"`
	TransactionId *int   `json:"transaction_id"`
	UpdatedAt     string `json:"updated_at"`
	User          *User  `json:"user,omitempty"`
	UserAgent     string `json:"user_agent"`
	UserId        *int   `json:"user_id"`
}

// AuditLogListRequest defines model for AuditLogListRequest.
type AuditLogListRequest struct {
	// AuditLogType Valid values include: login, logout, password_change, etc.
	AuditLogType *int    `json:"audit_log_type" query:"audit_log_type" validate:"omitempty"`
	Description  *string `json:"description" query:"description" validate:"omitempty"`
	Page         int     `default:"1" json:"page" query:"page" validate:"min=1"`
	PageSize     int     `default:"10" json:"page_size" query:"page_size" validate:"min=1"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field" validate:"omitempty"`

	// SortOrder Valid values: asc, desc
	SortOrder AuditLogListRequestSortOrder `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
	UserId    *int                         `json:"user_id" query:"user_id" validate:"omitempty"`
}

// AuditLogListRequestSortOrder Valid values: asc, desc
type AuditLogListRequestSortOrder string

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Name          string `binding:"required" json:"name"`
	PermissionIds []int  `json:"permission_ids"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email      openapi_types.Email `json:"email" validate:"required,email"`
	EnabledMfa bool                `json:"enabled_mfa" validate:"required"`
	FullName   string              `json:"full_name" validate:"required"`

	// MfaType Type of MFA to be enabled for the user
	MfaType  int    `json:"mfa_type" validate:"required"`
	Password string `json:"password" validate:"required,password_policy"`
	RoleId   int    `json:"role_id" validate:"required"`
}

// CreateVirtualAccountRequest defines model for CreateVirtualAccountRequest.
type CreateVirtualAccountRequest struct {
	BranchCode        string `json:"branch_code" validate:"required"`
	PaymentProviderId int    `json:"payment_provider_id" validate:"required"`
	VaAccountName     string `json:"va_account_name" validate:"required"`
	VaAccountNumber   string `json:"va_account_number" validate:"required"`
}

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// GmoAozoraWebhookIncoming defines model for GmoAozoraWebhookIncoming.
type GmoAozoraWebhookIncoming struct {
	AccessToken      string                  `json:"access_token"`
	Body             *map[string]interface{} `json:"body"`
	WebhookSignature string                  `json:"webhook_signature"`
}

// GmoAozoraWebhookIncomingRequest defines model for GmoAozoraWebhookIncomingRequest.
type GmoAozoraWebhookIncomingRequest struct {
	// AccessToken Access token from Webhook Aozora Net Bank
	AccessToken string  `json:"access_token"`
	Account     Account `json:"account"`

	// MessageId Data from Webhook GMO Aozora Net Bank
	MessageId string `json:"messageId" query:"messageId" validate:"omitempty"`

	// Timestamp Time stamp from Webhook GMO Aozora Net Bank
	Timestamp     string        `json:"timestamp" query:"timestamp" validate:"omitempty"`
	VaTransaction VATransaction `json:"vaTransaction"`

	// WebhookSignature webhook_signature to verify from Webhook Aozora Net Bank
	WebhookSignature string `json:"webhook_signature" query:"webhook_signature" validate:"omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email User's email address
	Email string `json:"email" validate:"required,email"`

	// Password User's password
	Password string `json:"password" validate:"required"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// Merchant defines model for Merchant.
type Merchant struct {
	BusinessName            string `json:"business_name"`
	CreatedAt               string `json:"created_at"`
	EntityName              string `json:"entity_name"`
	Id                      int    `json:"id"`
	IdDiv                   string `json:"id_div"`
	IsMajor                 bool   `json:"is_major"`
	PaymentMerchantId       string `json:"payment_merchant_id"`
	PaymentProviderId       int    `json:"payment_provider_id"`
	PaymentProviderReviewId int    `json:"payment_provider_review_id"`
	ShopId                  string `json:"shop_id"`
	SiteUrl                 string `json:"site_url"`
	UpdatedAt               string `json:"updated_at"`
}

// MerchantListRequest defines model for MerchantListRequest.
type MerchantListRequest struct {
	CreatedAtEnd   string `json:"created_at_end" query:"created_at_end" validate:"omitempty"`
	CreatedAtStart string `json:"created_at_start" query:"created_at_start" validate:"omitempty"`
	Page           int    `json:"page" query:"page"`
	PageSize       int    `json:"page_size" query:"page_size" validate:"omitempty,min=1"`
	ReviewStatus   []int  `json:"review_status" query:"review_status" validate:"omitempty"`
	Search         string `json:"search" query:"search" validate:"omitempty"`
	SortField      string `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder      string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// MerchantListResponse defines model for MerchantListResponse.
type MerchantListResponse struct {
	Merchants []Merchant `json:"merchants"`
	Page      int        `json:"page"`
	PageSize  int        `json:"page_size"`
	Total     int        `json:"total"`
}

// MfaType defines model for MfaType.
type MfaType struct {
	Id       int    `json:"id"`
	IsActive bool   `json:"is_active"`
	Title    string `json:"title"`
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	CreatedAt        time.Time           `json:"created_at"`
	Description      string              `json:"description"`
	Detail           *NotificationDetail `json:"detail,omitempty"`
	Id               int                 `json:"id"`
	NotificationType int                 `json:"notification_type"`
	UpdatedAt        time.Time           `json:"updated_at"`
}

// NotificationDetail defines model for NotificationDetail.
type NotificationDetail struct {
	PayoutId int `json:"payout_id"`
}

// NotificationListRequest defines model for NotificationListRequest.
type NotificationListRequest struct {
	Page      int    `json:"page" query:"page"`
	PageSize  int    `json:"page_size" query:"page_size" validate:"omitempty,min=1"`
	SortField string `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// NotificationListResponse defines model for NotificationListResponse.
type NotificationListResponse struct {
	Notifications []Notification `json:"notifications"`
	Page          int            `json:"page"`
	PageSize      int            `json:"page_size"`
	Total         int            `json:"total"`
}

// PayPayPayinDetail defines model for PayPayPayinDetail.
type PayPayPayinDetail struct {
	Adjustment           int64                `json:"adjustment"`
	Amount               int64                `json:"amount"`
	Cashback             int64                `json:"cashback"`
	CreatedAt            *time.Time           `json:"created_at"`
	CutoffDate           time.Time            `json:"cutoff_date"`
	Fee                  int64                `json:"fee"`
	Id                   int                  `json:"id"`
	InitialFee           int64                `json:"initial_fee"`
	MerchantBusinessName *string              `json:"merchant_business_name"`
	PayinFileId          *int                 `json:"payin_file_id"`
	PayinReconciliation  *PayinReconciliation `json:"payin_reconciliation,omitempty"`
	PaymentDate          *openapi_types.Date  `json:"payment_date"`
	PaymentMerchantId    *string              `json:"payment_merchant_id"`
	PlatformFee          int64                `json:"platform_fee"`
	RefundAmount         int64                `json:"refund_amount"`
	StoreNumber          *string              `json:"store_number"`
	Tax                  int64                `json:"tax"`
	TransactionAmount    int64                `json:"transaction_amount"`
	UpdatedAt            *time.Time           `json:"updated_at"`
	UsageFee             int64                `json:"usage_fee"`
}

// PayPayPayinSummary defines model for PayPayPayinSummary.
type PayPayPayinSummary struct {
	Adjustment          int64                `json:"adjustment"`
	Amount              int64                `json:"amount"`
	Cashback            int64                `json:"cashback"`
	CorporateName       string               `json:"corporate_name"`
	CreatedAt           *time.Time           `json:"created_at"`
	CutoffDate          time.Time            `json:"cutoff_date"`
	Fee                 int64                `json:"fee"`
	Id                  int                  `json:"id"`
	InitialFee          int64                `json:"initial_fee"`
	PayinFileId         *int                 `json:"payin_file_id"`
	PayinReconciliation *PayinReconciliation `json:"payin_reconciliation,omitempty"`
	PaymentDate         time.Time            `json:"payment_date"`
	PlatformFee         int64                `json:"platform_fee"`
	RefundAmount        int64                `json:"refund_amount"`
	Tax                 int64                `json:"tax"`
	TransactionAmount   int64                `json:"transaction_amount"`
	UpdatedAt           *time.Time           `json:"updated_at"`
	UsageFee            int64                `json:"usage_fee"`
}

// PayPayPayinTransaction defines model for PayPayPayinTransaction.
type PayPayPayinTransaction struct {
	CreatedAt                *time.Time                `json:"created_at"`
	Id                       int                       `json:"id"`
	MerchantBusinessName     *string                   `json:"merchant_business_name"`
	MerchantOrderId          *string                   `json:"merchant_order_id"`
	OrderTransactionAmount   *int64                    `json:"order_transaction_amount"`
	PayinFileId              *int                      `json:"payin_file_id"`
	PaymentDetail            *[]map[string]interface{} `json:"payment_detail,omitempty"`
	PaymentMerchantId        *string                   `json:"payment_merchant_id"`
	PaymentTransactionId     *string                   `json:"payment_transaction_id"`
	PaymentTransactionStatus *int                      `json:"payment_transaction_status"`
	ReceiptNumber            *string                   `json:"receipt_number"`
	ShopId                   *string                   `json:"shop_id"`
	ShopName                 *string                   `json:"shop_name"`
	Ssid                     *string                   `json:"ssid"`
	TerminalCode             *string                   `json:"terminal_code"`
	TransactionAmount        *int64                    `json:"transaction_amount"`
	TransactionAt            *time.Time                `json:"transaction_at"`
	UpdatedAt                *time.Time                `json:"updated_at"`
}

// PayinFile defines model for PayinFile.
type PayinFile struct {
	DownloadStatus         *bool                     `json:"download_status"`
	FileContentKey         *string                   `json:"file_content_key"`
	FileName               *string                   `json:"file_name"`
	FilePath               *string                   `json:"file_path"`
	HasDataRecord          *bool                     `json:"has_data_record"`
	Id                     int                       `json:"id"`
	ImportStatus           *int                      `json:"import_status"`
	IsAddedManually        *bool                     `json:"is_added_manually"`
	PayinFileGroup         *PayinFileGroup           `json:"payin_file_group,omitempty"`
	PayinFileGroupId       *int                      `json:"payin_file_group_id"`
	PayinFileType          *int                      `json:"payin_file_type"`
	PaymentProviderId      *int                      `json:"payment_provider_id"`
	PaypayPayinDetail      *[]PayPayPayinDetail      `json:"paypay_payin_detail,omitempty"`
	PaypayPayinSummary     *[]PayPayPayinSummary     `json:"paypay_payin_summary,omitempty"`
	PaypayPayinTransaction *[]PayPayPayinTransaction `json:"paypay_payin_transaction,omitempty"`
	UploadStatus           *bool                     `json:"upload_status"`
}

// PayinFileGroup defines model for PayinFileGroup.
type PayinFileGroup struct {
	CreatedAt        time.Time       `json:"created_at"`
	Id               int             `json:"id"`
	ImportTargetDate time.Time       `json:"import_target_date"`
	ImportedAt       time.Time       `json:"imported_at"`
	PayinFile        *[]PayinFile    `json:"payin_file,omitempty"`
	PaymentProvider  PaymentProvider `json:"payment_provider"`
	UpdatedAt        time.Time       `json:"updated_at"`
}

// PayinFileGroupListRequest defines model for PayinFileGroupListRequest.
type PayinFileGroupListRequest struct {
	// CreatedAtFrom Filter by created date from
	CreatedAtFrom string `json:"created_at_from" query:"created_at_from" validate:"omitempty"`

	// CreatedAtTo Filter by created date to
	CreatedAtTo string `json:"created_at_to" query:"created_at_to" validate:"omitempty"`

	// ImportTargetDateFrom Filter by actual imported at
	ImportTargetDateFrom string `json:"import_target_date_from" query:"import_target_date_from" validate:"omitempty"`

	// ImportTargetDateTo Filter by actual import target date
	ImportTargetDateTo string `json:"import_target_date_to" query:"import_target_date_to" validate:"omitempty"`

	// IsImportedManual Filter by method import file
	IsImportedManual string `json:"is_imported_manual" query:"is_imported_manual" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int    `json:"page_size" query:"page_size" validate:"omitempty,min=1"`
	Search   string `json:"search" query:"search" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`
	SortOrder string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// PayinFileGroupListResponse defines model for PayinFileGroupListResponse.
type PayinFileGroupListResponse struct {
	Page            int               `json:"page"`
	PageSize        int               `json:"page_size"`
	PayinFileGroups *[]PayinFileGroup `json:"payin_file_groups,omitempty"`
	Total           int               `json:"total"`
	TotalPages      *int              `json:"total_pages,omitempty"`
}

// PayinFileListRequest defines model for PayinFileListRequest.
type PayinFileListRequest struct {
	// CreatedAt Filter by creation date
	CreatedAt string `json:"created_at" query:"created_at" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PayinFileGroupId Filter by payin file group id
	PayinFileGroupId int `json:"payin_file_group_id" query:"payin_file_group_id" validate:"omitempty"`

	// PayinFileType Filter by payin file type
	PayinFileType *int   `json:"payin_file_type,omitempty" query:"payin_file_type" validate:"omitempty"`
	Search        string `json:"search" query:"search" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`
	SortOrder string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// PayinFileListResponse defines model for PayinFileListResponse.
type PayinFileListResponse struct {
	Page        int         `json:"page"`
	PageSize    int         `json:"page_size"`
	PayinDetail []PayinFile `json:"payin_detail"`
	Total       int         `json:"total"`
	TotalPages  *int        `json:"total_pages,omitempty"`
}

// PayinReconciliation defines model for PayinReconciliation.
type PayinReconciliation struct {
	CreatedAt                           *time.Time `json:"created_at,omitempty"`
	Id                                  int        `json:"id"`
	MatchedTransactionRecords           *int       `json:"matched_transaction_records,omitempty"`
	MerchantId                          int        `json:"merchant_id,omitempty"`
	PayinDetailId                       *int       `json:"payin_detail_id,omitempty"`
	PayinDetailSumVsPayinTransactionSum *int       `json:"payin_detail_sum_vs_payin_transaction_sum,omitempty"`
	PayinFileGroupId                    *int       `json:"payin_file_group_id,omitempty"`
	PayinSummaryVsBankIncoming          *int       `json:"payin_summary_vs_bank_incoming,omitempty"`
	PayinSummaryVsPayinDetail           *int       `json:"payin_summary_vs_payin_detail,omitempty"`
	PayinTransactionVsMakeshopOrder     *int       `json:"payin_transaction_vs_makeshop_order,omitempty"`
	PaypayPayinSummaryId                *int       `json:"paypay_payin_summary_id,omitempty"`
	SkippedTransactionRecords           *int       `json:"skipped_transaction_records,omitempty"`
	TotalTransactionRecords             *int       `json:"total_transaction_records,omitempty"`
	UpdatedAt                           *time.Time `json:"updated_at,omitempty"`
}

// PaymentDetail defines model for PaymentDetail.
type PaymentDetail = []struct {
	Amount        float64 `json:"amount"`
	PaymentMethod string  `json:"paymentMethod"`
}

// PaymentProvider defines model for PaymentProvider.
type PaymentProvider struct {
	Code      string    `json:"code"`
	CreatedAt time.Time `json:"created_at"`
	Id        int       `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// PaymentProviderReview defines model for PaymentProviderReview.
type PaymentProviderReview struct {
	ApplicationAt           *time.Time                `json:"application_at"`
	ApplicationReviewStatus int                       `json:"application_review_status"`
	AppliedStoreCount       int                       `json:"applied_store_count"`
	BusinessName            string                    `json:"business_name"`
	CompanyName             string                    `json:"company_name"`
	CreatedAt               time.Time                 `json:"created_at"`
	EntityName              string                    `json:"entity_name"`
	FeeRate                 float32                   `json:"fee_rate"`
	Id                      int                       `json:"id"`
	IdDiv                   string                    `json:"id_div"`
	IsMajor                 bool                      `json:"is_major"`
	MasterAgentNote         string                    `json:"master_agent_note"`
	Merchant                *Merchant                 `json:"merchant,omitempty"`
	PaymentProvider         *PaymentProvider          `json:"payment_provider,omitempty"`
	PaymentProviderId       int                       `json:"payment_provider_id"`
	PayoriginId             string                    `json:"payorigin_id"`
	ReviewInfo              PaymentProviderReviewInfo `json:"review_info"`
	ShopId                  string                    `json:"shop_id"`
	UpdatedAt               time.Time                 `json:"updated_at"`
}

// PaymentProviderReviewInfo defines model for PaymentProviderReviewInfo.
type PaymentProviderReviewInfo struct {
	ConfirmationChangedAt  *time.Time `json:"confirmation_changed_at"`
	IssuanceStatus         *string    `json:"issuance_status,omitempty"`
	MerchantDate           *time.Time `json:"merchant_date"`
	MonthlyLimitAmount     *int64     `json:"monthly_limit_amount,omitempty"`
	PaymentMerchantId      *string    `json:"payment_merchant_id,omitempty"`
	RejectDate             *time.Time `json:"reject_date"`
	RepresentativeResponse *string    `json:"representative_response,omitempty"`
	ReviewStatus           *string    `json:"review_status,omitempty"`
	SaleReviewComment      *string    `json:"sale_review_comment,omitempty"`
	SiteUrl                *string    `json:"site_url,omitempty"`
}

// Payout defines model for Payout.
type Payout struct {
	AozoraTransferApplyNo *string `json:"aozora_transfer_apply_no,omitempty"`
	ApprovalId            *int    `json:"approval_id"`
	CreatedAt             string  `json:"created_at"`
	Id                    int     `json:"id"`
	PayoutRecordCount     int     `json:"payout_record_count"`
	PayoutRecordSumAmount int64   `json:"payout_record_sum_amount"`

	// PayoutStatus Status of the payout
	PayoutStatus int        `json:"payout_status"`
	SendingDate  *time.Time `json:"sending_date"`
	SentDate     *time.Time `json:"sent_date"`
	Total        int64      `json:"total"`
	TotalCount   int        `json:"total_count"`
	UpdatedAt    string     `json:"updated_at"`
	User         User       `json:"user"`
	UserId       int        `json:"user_id"`
}

// PayoutListRequest defines model for PayoutListRequest.
type PayoutListRequest struct {
	// CreatedAt Filter by creation date
	CreatedAt string `json:"created_at" query:"created_at" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PayoutStatus Filter by payout status
	PayoutStatus int `json:"payout_status" query:"payout_status" validate:"omitempty"`

	// SendingDate Filter by scheduled sending date
	SendingDate string `json:"sending_date" query:"sending_date" validate:"omitempty"`

	// SentDate Filter by actual sent date
	SentDate string `json:"sent_date" query:"sent_date" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`

	// SortOrder Sort direction (ascending or descending)
	SortOrder PayoutListRequestSortOrder `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// PayoutListRequestSortOrder Sort direction (ascending or descending)
type PayoutListRequestSortOrder string

// PayoutListResponse defines model for PayoutListResponse.
type PayoutListResponse struct {
	Page       int      `json:"page"`
	PageSize   int      `json:"page_size"`
	Payouts    []Payout `json:"payouts"`
	Total      int      `json:"total"`
	TotalPages *int     `json:"total_pages,omitempty"`
}

// PayoutRecord defines model for PayoutRecord.
type PayoutRecord struct {
	AccountName           string     `json:"account_name"`
	AccountNo             string     `json:"account_no"`
	Amount                int64      `json:"amount"`
	AozoraTransferApplyNo string     `json:"aozora_transfer_apply_no"`
	BankAccountType       int        `json:"bank_account_type"`
	BankCode              string     `json:"bank_code"`
	BankName              string     `json:"bank_name"`
	BranchCode            string     `json:"branch_code"`
	BranchName            string     `json:"branch_name"`
	CreatedAt             time.Time  `json:"created_at"`
	Id                    int        `json:"id"`
	IdempotencyKey        string     `json:"idempotency_key"`
	PayoutId              int        `json:"payout_id"`
	SendingDate           *time.Time `json:"sending_date"`
	ShopId                string     `json:"shop_id"`
	TransactionId         int        `json:"transaction_id"`
	TransferExecutedAt    *time.Time `json:"transfer_executed_at"`
	TransferRequestError  *string    `json:"transfer_request_error,omitempty"`
	TransferRequestedAt   *time.Time `json:"transfer_requested_at"`
	TransferStatus        int        `json:"transfer_status"`
	UpdatedAt             time.Time  `json:"updated_at"`
}

// PaypayPayinDetailListRequest defines model for PaypayPayinDetailListRequest.
type PaypayPayinDetailListRequest struct {
	// CreatedAt Filter by creation date
	CreatedAt string `json:"created_at" query:"created_at" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PayinFileGroupId Filter by actual payin file group id at
	PayinFileGroupId int    `json:"payin_file_group_id" query:"payin_file_group_id" validate:"omitempty"`
	Search           string `json:"search" query:"search" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`
	SortOrder string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// PaypayPayinDetailListResponse defines model for PaypayPayinDetailListResponse.
type PaypayPayinDetailListResponse struct {
	Page              int                 `json:"page"`
	PageSize          int                 `json:"page_size"`
	PaypayPayinDetail []PayPayPayinDetail `json:"paypay_payin_detail"`
	Total             int                 `json:"total"`
	TotalPages        *int                `json:"total_pages,omitempty"`
}

// PaypayPayinSummaryListRequest defines model for PaypayPayinSummaryListRequest.
type PaypayPayinSummaryListRequest struct {
	// CreatedAt Filter by creation date
	CreatedAt string `json:"created_at" query:"created_at" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PayinFileGroupId Filter by actual payin file group id at
	PayinFileGroupId int    `json:"payin_file_group_id" query:"payin_file_group_id" validate:"omitempty"`
	Search           string `json:"search" query:"search" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`
	SortOrder string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`

	// UpdatedAt Filter by creation date
	UpdatedAt *string `json:"updated_at,omitempty" query:"updated_at" validate:"omitempty"`
}

// PaypayPayinSummaryListResponse defines model for PaypayPayinSummaryListResponse.
type PaypayPayinSummaryListResponse struct {
	Page               int                  `json:"page"`
	PageSize           int                  `json:"page_size"`
	PaypayPayinSummary []PayPayPayinSummary `json:"paypay_payin_summary"`
	Total              int                  `json:"total"`
	TotalPages         *int                 `json:"total_pages,omitempty"`
}

// PaypayPayinTransactionListRequest defines model for PaypayPayinTransactionListRequest.
type PaypayPayinTransactionListRequest struct {
	// CreatedAt Filter by creation date
	CreatedAt string `json:"created_at" query:"created_at" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PayinFileGroupId Filter by actual payin file group id at
	PayinFileGroupId int    `json:"payin_file_group_id" query:"payin_file_group_id" validate:"omitempty"`
	Search           string `json:"search" query:"search" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`
	SortOrder string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// PaypayPayinTransactionListResponse defines model for PaypayPayinTransactionListResponse.
type PaypayPayinTransactionListResponse struct {
	Page                   int                      `json:"page"`
	PageSize               int                      `json:"page_size"`
	PaypayPayinTransaction []PayPayPayinTransaction `json:"paypay_payin_transaction"`
	Total                  int                      `json:"total"`
	TotalPages             *int                     `json:"total_pages,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Code string `json:"code"`
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// PermissionResponse defines model for PermissionResponse.
type PermissionResponse struct {
	Page        int          `json:"page"`
	PageSize    int          `json:"page_size"`
	Permissions []Permission `json:"permissions"`
	Total       int          `json:"total"`
}

// RecentMonthSummaryTransaction defines model for RecentMonthSummaryTransaction.
type RecentMonthSummaryTransaction struct {
	ProcessingCount  int       `json:"processing_count"`
	TargetMonth      time.Time `json:"target_month"`
	TotalCount       int       `json:"total_count"`
	TransferredCount int       `json:"transferred_count"`
}

// RecentMonthSummaryTransactionRequest defines model for RecentMonthSummaryTransactionRequest.
type RecentMonthSummaryTransactionRequest struct {
	// NumberRecentMonths number recent months
	NumberRecentMonths int `json:"number_recent_months" query:"number_recent_months"`
}

// RecentMonthSummaryTransactionResponse defines model for RecentMonthSummaryTransactionResponse.
type RecentMonthSummaryTransactionResponse struct {
	TransactionSummary []RecentMonthSummaryTransaction `json:"transaction_summary"`
}

// Reconciliation defines model for Reconciliation.
type Reconciliation struct {
	Id                                  int    `json:"id"`
	MatchedTransactionRecords           int    `json:"matched_transaction_records"`
	MerchantId                          int    `json:"merchant_id"`
	PayInDetailId                       int    `json:"pay_in_detail_id"`
	PayinDetailSumVsPayinTransactionSum int    `json:"payin_detail_sum_vs_payin_transaction_sum"`
	PayinFileGroupId                    int    `json:"payin_file_group_id"`
	PayinSummaryVsBankIncoming          int    `json:"payin_summary_vs_bank_incoming"`
	PayinSummaryVsPayinDetail           int    `json:"payin_summary_vs_payin_detail"`
	PayinTransactionVsMakeshopOrder     int    `json:"payin_transaction_vs_makeshop_order"`
	PaymentMerchantId                   string `json:"payment_merchant_id"`
	PaypayPayinSummaryId                int    `json:"paypay_payin_summary_id"`
	SkippedTransactionRecords           int    `json:"skipped_transaction_records"`
	TotalTransactionRecords             int    `json:"total_transaction_records"`
}

// RequiredTwoFaResponse defines model for RequiredTwoFaResponse.
type RequiredTwoFaResponse struct {
	ExpiresIn   int    `json:"expires_in"`
	MfaType     string `json:"mfa_type"`
	RequiresMfa bool   `json:"requires_mfa"`
	User        User   `json:"user"`
}

// ResendCodeRequest defines model for ResendCodeRequest.
type ResendCodeRequest struct {
	Email   openapi_types.Email `json:"email" validate:"required,email"`
	MfaType *int                `json:"mfa_type,omitempty"`
}

// ResendCodeResponse defines model for ResendCodeResponse.
type ResendCodeResponse struct {
	CanResend     bool `json:"can_resend"`
	ExpiresIn     int  `json:"expires_in"`
	RemainingTime int  `json:"remaining_time"`
}

// Role defines model for Role.
type Role struct {
	Id          int           `json:"id"`
	Name        string        `json:"name"`
	Permissions *[]Permission `json:"permissions,omitempty"`
	UserCount   int           `json:"user_count"`
}

// RoleListResponse defines model for RoleListResponse.
type RoleListResponse struct {
	Page       int    `json:"page"`
	PageSize   int    `json:"page_size"`
	Roles      []Role `json:"roles"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
}

// Screen defines model for Screen.
type Screen struct {
	Id          int           `json:"id"`
	Name        string        `json:"name"`
	Permissions *[]Permission `json:"permissions,omitempty"`
	ScreenCode  string        `json:"screen_code"`
	ScreenPath  string        `json:"screen_path"`
}

// Shop Shop entity representing a merchant's shop
type Shop struct {
	// AccountHolder Name of the account holder
	AccountHolder string `json:"account_holder"`

	// AccountHolderKana Kana representation of the account holder's name
	AccountHolderKana string `json:"account_holder_kana"`

	// AccountKind Account type (普通口座, 当座口座)
	AccountKind string `json:"account_kind"`

	// AccountNumber Bank account number
	AccountNumber string `json:"account_number"`

	// BankBranch Bank branch name
	BankBranch string `json:"bank_branch"`

	// BankBranchCode Bank branch code
	BankBranchCode string `json:"bank_branch_code"`

	// BankCode Bank code
	BankCode string `json:"bank_code"`

	// BankName Name of the bank
	BankName string `json:"bank_name"`

	// Id Unique identifier for the shop
	Id string `json:"id"`

	// PaymentProviderReviews Associated payment provider reviews
	PaymentProviderReviews *[]PaymentProviderReview `json:"payment_provider_reviews"`

	// ShopName Name of the shop
	ShopName string `json:"shop_name"`

	// ShopUrl URL of the shop
	ShopUrl string `json:"shop_url"`
}

// ShopReviewListRequest defines model for ShopReviewListRequest.
type ShopReviewListRequest struct {
	CreatedAtEnd   string `json:"created_at_end" query:"created_at_end" validate:"omitempty"`
	CreatedAtStart string `json:"created_at_start" query:"created_at_start" validate:"omitempty"`
	Page           int    `json:"page" query:"page"`
	PageSize       int    `json:"page_size" query:"page_size" validate:"omitempty,min=1"`
	ReviewStatus   []int  `json:"review_status" query:"review_status" validate:"omitempty"`
	Search         string `json:"search" query:"search" validate:"omitempty"`
	SortField      string `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder      string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Success *bool                   `json:"success,omitempty"`
}

// TransactionRecord defines model for TransactionRecord.
type TransactionRecord struct {
	Amount                int64  `json:"amount"`
	CreatedAt             string `json:"created_at"`
	Id                    int    `json:"id"`
	MerchantId            int    `json:"merchant_id"`
	PayinDetailId         int    `json:"payin_detail_id"`
	PayinSummaryId        int    `json:"payin_summary_id"`
	RecordTypeText        string `json:"record_type_text"`
	Title                 string `json:"title"`
	TransactionId         int    `json:"transaction_id"`
	TransactionRecordType int    `json:"transaction_record_type"`
	UpdatedAt             string `json:"updated_at"`
}

// TransferApprovalRequest defines model for TransferApprovalRequest.
type TransferApprovalRequest struct {
	// Action Approval action to perform
	Action TransferApprovalRequestAction `json:"action"`

	// Note Note for the approval
	Note     string `json:"note"`
	PayoutId int    `json:"payout_id"`
}

// TransferApprovalRequestAction Approval action to perform
type TransferApprovalRequestAction string

// TransferApprovalResponse defines model for TransferApprovalResponse.
type TransferApprovalResponse struct {
	ApprovalId   int    `json:"approval_id"`
	CurrentStage int    `json:"current_stage"`
	NextStage    *int   `json:"next_stage"`
	PayoutId     int    `json:"payout_id"`
	Status       string `json:"status"`
}

// TransferRequestListRequest defines model for TransferRequestListRequest.
type TransferRequestListRequest struct {
	Page                  int    `json:"page" query:"page" validate:"omitempty,min=1"`
	PageSize              int    `json:"page_size" query:"page_size" validate:"omitempty,min=1,max=1000"`
	ReconciliationFilters []int  `json:"reconciliation_filters" query:"reconciliation_filters" validate:"omitempty,dive,oneof=1 2 3"`
	SortField             string `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder             string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// TransferRequestListResponse defines model for TransferRequestListResponse.
type TransferRequestListResponse struct {
	Page             int                          `json:"page"`
	PageSize         int                          `json:"page_size"`
	Total            int                          `json:"total"`
	TotalPages       int                          `json:"total_pages"`
	TransferRequests []TransferTransactionRequest `json:"transfer_requests"`
}

// TransferTransaction defines model for TransferTransaction.
type TransferTransaction struct {
	// AccountName Account holder name
	AccountName string `json:"account_name"`

	// AccountNumber Bank account number
	AccountNumber string `json:"account_number"`

	// Amount Transaction amount in smallest currency unit
	Amount int64 `json:"amount"`

	// BankBranchCode Bank branch code
	BankBranchCode string `json:"bank_branch_code"`

	// BankCode Bank code
	BankCode string `json:"bank_code"`

	// BranchName Bank branch name
	BranchName string `json:"branch_name"`

	// CreatedAt Timestamp when the transaction was created
	CreatedAt    string       `json:"created_at"`
	Merchant     Merchant     `json:"merchant"`
	Payout       Payout       `json:"payout"`
	PayoutRecord PayoutRecord `json:"payout_record"`

	// Shop Shop entity representing a merchant's shop
	Shop Shop `json:"shop"`

	// TransactionId Unique identifier for the transaction
	TransactionId int `json:"transaction_id"`

	// TransactionStatus Status of the transaction
	TransactionStatus int `json:"transaction_status"`

	// TransactionStatusText Human-readable status of the transaction
	TransactionStatusText *string `json:"transaction_status_text,omitempty"`

	// UpdatedAt Timestamp when the transaction was last updated
	UpdatedAt string `json:"updated_at"`
}

// TransferTransactionDetail defines model for TransferTransactionDetail.
type TransferTransactionDetail struct {
	CreatedAt             string              `json:"created_at"`
	Id                    int                 `json:"id"`
	Merchant              Merchant            `json:"merchant"`
	PayinFileGroupId      int                 `json:"payin_file_group_id"`
	PayoutId              int                 `json:"payout_id"`
	Reconciliation        Reconciliation      `json:"reconciliation"`
	TransactionRecords    []TransactionRecord `json:"transaction_records"`
	TransactionStatus     int                 `json:"transaction_status"`
	TransactionStatusText string              `json:"transaction_status_text"`
	UpdatedAt             string              `json:"updated_at"`
}

// TransferTransactionRequest defines model for TransferTransactionRequest.
type TransferTransactionRequest struct {
	AccountName                 string   `json:"account_name"`
	AccountNumber               string   `json:"account_number"`
	Amount                      int64    `json:"amount"`
	BankBranchCode              string   `json:"bank_branch_code"`
	BankCode                    string   `json:"bank_code"`
	BankName                    string   `json:"bank_name"`
	BranchName                  string   `json:"branch_name"`
	CreatedAt                   string   `json:"created_at"`
	Merchant                    Merchant `json:"merchant"`
	ReconciliationSummaryStatus string   `json:"reconciliation_summary_status"`

	// Shop Shop entity representing a merchant's shop
	Shop              Shop   `json:"shop"`
	TransactionId     int    `json:"transaction_id"`
	TransactionStatus int    `json:"transaction_status"`
	UpdatedAt         string `json:"updated_at"`
}

// TransferTransactionResponse Transfer transaction response
type TransferTransactionResponse struct {
	Approval             ApprovalInfo          `json:"approval"`
	CurrentPage          int                   `json:"current_page"`
	PageSize             int                   `json:"page_size"`
	TotalCount           int                   `json:"total_count"`
	TotalPages           int                   `json:"total_pages"`
	TransferTransactions []TransferTransaction `json:"transfer_transactions"`
}

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// UpdatePayoutRequest defines model for UpdatePayoutRequest.
type UpdatePayoutRequest struct {
	MerchantId        *int `json:"merchant_id,omitempty"`
	PaymentProviderId *int `json:"payment_provider_id,omitempty"`
	Records           *[]struct {
		Amount *float32 `json:"amount,omitempty"`

		// Id ID of existing record (for updates)
		Id            *int                              `json:"id,omitempty"`
		Status        *UpdatePayoutRequestRecordsStatus `json:"status,omitempty"`
		TransactionId *string                           `json:"transaction_id,omitempty"`
	} `json:"records,omitempty"`
	Status      *UpdatePayoutRequestStatus `json:"status,omitempty"`
	TotalAmount *float32                   `json:"total_amount,omitempty"`
}

// UpdatePayoutRequestRecordsStatus defines model for UpdatePayoutRequest.Records.Status.
type UpdatePayoutRequestRecordsStatus string

// UpdatePayoutRequestStatus defines model for UpdatePayoutRequest.Status.
type UpdatePayoutRequestStatus string

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	Description   *string `json:"description,omitempty"`
	Name          string  `binding:"required" json:"name"`
	PermissionIds []int   `json:"permission_ids"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Email      *openapi_types.Email `json:"email,omitempty" validate:"omitempty,email"`
	EnabledMfa *bool                `json:"enabled_mfa,omitempty"`
	FullName   *string              `json:"full_name,omitempty" validate:"omitempty"`

	// MfaType Type of MFA to be enabled for the user
	MfaType  *int    `json:"mfa_type" validate:"required"`
	Password *string `json:"password,omitempty" validate:"omitempty,password_policy"`
	RoleId   *int    `json:"role_id,omitempty" validate:"omitempty"`
}

// UpdateVirtualAccountRequest defines model for UpdateVirtualAccountRequest.
type UpdateVirtualAccountRequest struct {
	BranchCode        *string `json:"branch_code"`
	PaymentProviderId *int    `json:"payment_provider_id"`
	VaAccountName     *string `json:"va_account_name"`
	VaAccountNumber   *string `json:"va_account_number"`
}

// User defines model for User.
type User struct {
	CreatedAt  string  `json:"created_at"`
	Email      string  `json:"email"`
	EnabledMfa bool    `json:"enabled_mfa"`
	FullName   string  `json:"full_name"`
	Id         int     `json:"id"`
	MfaType    MfaType `json:"mfa_type"`

	// Password Password of the user
	Password *string `json:"password,omitempty"`
	Role     Role    `json:"role"`

	// RoleId Role ID of the user
	RoleId    *int   `json:"role_id,omitempty"`
	UpdatedAt string `json:"updated_at"`
}

// UserListRequest defines model for UserListRequest.
type UserListRequest struct {
	Page      int                      `default:"1" json:"page" query:"page" validate:"min=1"`
	PageSize  int                      `default:"10" json:"page_size" query:"page_size" validate:"min=1"`
	RoleId    *int                     `json:"role_id" query:"role_id" validate:"omitempty,min=1"`
	Search    string                   `json:"search" query:"search" validate:"omitempty,max=255"`
	SortField string                   `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder UserListRequestSortOrder `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// UserListRequestSortOrder defines model for UserListRequest.SortOrder.
type UserListRequestSortOrder string

// UserListResponse defines model for UserListResponse.
type UserListResponse struct {
	Page       int    `json:"page"`
	PageSize   int    `json:"page_size"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
	Users      []User `json:"users"`
}

// VATransaction defines model for VATransaction.
type VATransaction struct {
	DepositAmount     string `json:"depositAmount"`
	ItemKey           string `json:"itemKey"`
	PartnerName       string `json:"partnerName"`
	PaymentBankName   string `json:"paymentBankName"`
	PaymentBranchName string `json:"paymentBranchName"`
	Remarks           string `json:"remarks"`
	RemitterNameKana  string `json:"remitterNameKana"`
	TransactionDate   string `json:"transactionDate"`
	VaAccountNameKana string `json:"vaAccountNameKana"`
	VaAccountNumber   string `json:"vaAccountNumber"`
	VaBranchCode      string `json:"vaBranchCode"`
	VaBranchNameKana  string `json:"vaBranchNameKana"`
	VaId              string `json:"vaId"`
	ValueDate         string `json:"valueDate"`
}

// VerifyMFARequest defines model for VerifyMFARequest.
type VerifyMFARequest struct {
	Email openapi_types.Email `json:"email" validate:"required,email"`
	Token string              `json:"token" validate:"required"`
}

// VerifyMFAResponse defines model for VerifyMFAResponse.
type VerifyMFAResponse struct {
	Token *string `json:"token,omitempty"`
	User  *User   `json:"user,omitempty"`
}

// VirtualAccount defines model for VirtualAccount.
type VirtualAccount struct {
	BranchCode        *string                 `json:"branch_code"`
	CreatedAt         time.Time               `json:"created_at"`
	Id                int                     `json:"id"`
	PaymentProvider   PaymentProvider         `json:"payment_provider"`
	PaymentProviderId *int                    `json:"payment_provider_id"`
	RawJsonData       *map[string]interface{} `json:"raw_json_data"`
	UpdatedAt         time.Time               `json:"updated_at"`
	VaAccountName     *string                 `json:"va_account_name"`
	VaAccountNumber   *string                 `json:"va_account_number"`
}

// VirtualAccountListRequest defines model for VirtualAccountListRequest.
type VirtualAccountListRequest struct {
	// CreatedAtFrom Filter by created date from
	CreatedAtFrom *string `json:"created_at_from,omitempty" query:"created_at_from" validate:"omitempty"`

	// CreatedAtTo Filter by created date to
	CreatedAtTo *string `json:"created_at_to,omitempty" query:"created_at_to" validate:"omitempty"`

	// Page Page number for pagination
	Page *int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize *int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PaymentProviderId Filter by payment provider id
	PaymentProviderId *int `json:"payment_provider_id,omitempty" query:"payment_provider_id" validate:"omitempty"`

	// SortField Field to sort results by
	SortField *string `json:"sort_field" query:"sort_field"`
	SortOrder *string `json:"sort_order,omitempty" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// VirtualAccountListResponse defines model for VirtualAccountListResponse.
type VirtualAccountListResponse struct {
	Page            int              `json:"page"`
	PageSize        int              `json:"page_size"`
	Total           int              `json:"total"`
	TotalPages      *int             `json:"total_pages,omitempty"`
	VirtualAccounts []VirtualAccount `json:"virtual_accounts"`
}

// ListNotificationsParams defines parameters for ListNotifications.
type ListNotificationsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListNotificationsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Search Search
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListNotificationsParamsSortOrder defines parameters for ListNotifications.
type ListNotificationsParamsSortOrder string

// ListPayinFileGroupsParams defines parameters for ListPayinFileGroups.
type ListPayinFileGroupsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListPayinFileGroupsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Search Search
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// CreatedAtFrom Filter
	CreatedAtFrom *string `form:"created_at_from,omitempty" json:"created_at_from,omitempty"`

	// CreatedAtTo Filter
	CreatedAtTo *string `form:"created_at_to,omitempty" json:"created_at_to,omitempty"`

	// ImportTargetDateFrom Filter
	ImportTargetDateFrom *string `form:"import_target_date_from,omitempty" json:"import_target_date_from,omitempty"`

	// ImportTargetDateTo Filter
	ImportTargetDateTo *string `form:"import_target_date_to,omitempty" json:"import_target_date_to,omitempty"`

	// IsImportedManual Filter
	IsImportedManual *string `form:"is_imported_manual,omitempty" json:"is_imported_manual,omitempty"`
}

// ListPayinFileGroupsParamsSortOrder defines parameters for ListPayinFileGroups.
type ListPayinFileGroupsParamsSortOrder string

// ListPayinFilesParams defines parameters for ListPayinFiles.
type ListPayinFilesParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListPayinFilesParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Search Search
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// CreatedAt Filter
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`

	// PayinFileGroupId Filter
	PayinFileGroupId *int `form:"payin_file_group_id,omitempty" json:"payin_file_group_id,omitempty"`

	// PayinFileType Filter
	PayinFileType *int `form:"payin_file_type,omitempty" json:"payin_file_type,omitempty"`
}

// ListPayinFilesParamsSortOrder defines parameters for ListPayinFiles.
type ListPayinFilesParamsSortOrder string

// ListPaymentProvidersParams defines parameters for ListPaymentProviders.
type ListPaymentProvidersParams struct {
	// IsActive Filter by active status
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`
}

// CreatePayoutParams defines parameters for CreatePayout.
type CreatePayoutParams struct {
	// TransactionIds List of transaction IDs to create payout from
	TransactionIds []int `form:"transaction_ids" json:"transaction_ids"`
}

// ListPaypayPayinDetailsParams defines parameters for ListPaypayPayinDetails.
type ListPaypayPayinDetailsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListPaypayPayinDetailsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Search Search
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListPaypayPayinDetailsParamsSortOrder defines parameters for ListPaypayPayinDetails.
type ListPaypayPayinDetailsParamsSortOrder string

// ListPaypayPayinSummaryParams defines parameters for ListPaypayPayinSummary.
type ListPaypayPayinSummaryParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListPaypayPayinSummaryParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Search Search
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListPaypayPayinSummaryParamsSortOrder defines parameters for ListPaypayPayinSummary.
type ListPaypayPayinSummaryParamsSortOrder string

// ListPaypayPayinTransactionsParams defines parameters for ListPaypayPayinTransactions.
type ListPaypayPayinTransactionsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListPaypayPayinTransactionsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// Search Search
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListPaypayPayinTransactionsParamsSortOrder defines parameters for ListPaypayPayinTransactions.
type ListPaypayPayinTransactionsParamsSortOrder string

// GetTransactionSummaryParams defines parameters for GetTransactionSummary.
type GetTransactionSummaryParams struct {
	// NumberRecentMonths Month recent count
	NumberRecentMonths *int `form:"number_recent_months,omitempty" json:"number_recent_months,omitempty"`
}

// ListShopReviewsParams defines parameters for ListShopReviews.
type ListShopReviewsParams struct {
	ShopReviewListRequest ShopReviewListRequest `form:"ShopReviewListRequest" json:"ShopReviewListRequest"`
}

// ImportPaymentProviderReviewCSVMultipartBody defines parameters for ImportPaymentProviderReviewCSV.
type ImportPaymentProviderReviewCSVMultipartBody struct {
	// File CSV file containing payment provider review data
	File openapi_types.File `json:"file" query:"file" validate:"is_csv"`

	// PaymentProviderId Payment provider ID to associate with the imported reviews
	PaymentProviderId int `json:"payment_provider_id"`
}

// ListTransferRequestsParams defines parameters for ListTransferRequests.
type ListTransferRequestsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListTransferRequestsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// ReconciliationFilters Filter by reconciliation status:
	//   1: Perfect Match
	//   2: Partial Match
	//   3: Mismatch
	ReconciliationFilters *[]ListTransferRequestsParamsReconciliationFilters `form:"reconciliation_filters,omitempty" json:"reconciliation_filters,omitempty"`
}

// ListTransferRequestsParamsSortOrder defines parameters for ListTransferRequests.
type ListTransferRequestsParamsSortOrder string

// ListTransferRequestsParamsReconciliationFilters defines parameters for ListTransferRequests.
type ListTransferRequestsParamsReconciliationFilters int

// ListTransferTransactionsParams defines parameters for ListTransferTransactions.
type ListTransferTransactionsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort results by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListTransferTransactionsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`
}

// ListTransferTransactionsParamsSortOrder defines parameters for ListTransferTransactions.
type ListTransferTransactionsParamsSortOrder string

// ListVirtualAccountsParams defines parameters for ListVirtualAccounts.
type ListVirtualAccountsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SortField Field to sort by
	SortField *string `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListVirtualAccountsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// CreatedAtFrom Filter by created date from
	CreatedAtFrom *string `form:"created_at_from,omitempty" json:"created_at_from,omitempty"`

	// CreatedAtTo Filter by created date to
	CreatedAtTo *string `form:"created_at_to,omitempty" json:"created_at_to,omitempty"`

	// PaymentProviderId Filter by payment provider ID
	PaymentProviderId *int `form:"payment_provider_id,omitempty" json:"payment_provider_id,omitempty"`
}

// ListVirtualAccountsParamsSortOrder defines parameters for ListVirtualAccounts.
type ListVirtualAccountsParamsSortOrder string

// PostAdminApprovalsTransfersJSONRequestBody defines body for PostAdminApprovalsTransfers for application/json ContentType.
type PostAdminApprovalsTransfersJSONRequestBody = TransferApprovalRequest

// ListAuditLogsJSONRequestBody defines body for ListAuditLogs for application/json ContentType.
type ListAuditLogsJSONRequestBody = AuditLogListRequest

// HandleAozoraCallbackJSONRequestBody defines body for HandleAozoraCallback for application/json ContentType.
type HandleAozoraCallbackJSONRequestBody = AozoraCallbackRequest

// ListMerchantsJSONRequestBody defines body for ListMerchants for application/json ContentType.
type ListMerchantsJSONRequestBody = MerchantListRequest

// ListPayoutsJSONRequestBody defines body for ListPayouts for application/json ContentType.
type ListPayoutsJSONRequestBody = PayoutListRequest

// UpdatePayoutJSONRequestBody defines body for UpdatePayout for application/json ContentType.
type UpdatePayoutJSONRequestBody = UpdatePayoutRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// ImportPaymentProviderReviewCSVMultipartRequestBody defines body for ImportPaymentProviderReviewCSV for multipart/form-data ContentType.
type ImportPaymentProviderReviewCSVMultipartRequestBody ImportPaymentProviderReviewCSVMultipartBody

// ListUsersJSONRequestBody defines body for ListUsers for application/json ContentType.
type ListUsersJSONRequestBody = UserListRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// CreateVirtualAccountJSONRequestBody defines body for CreateVirtualAccount for application/json ContentType.
type CreateVirtualAccountJSONRequestBody = CreateVirtualAccountRequest

// UpdateVirtualAccountJSONRequestBody defines body for UpdateVirtualAccount for application/json ContentType.
type UpdateVirtualAccountJSONRequestBody = UpdateVirtualAccountRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ResendCodeJSONRequestBody defines body for ResendCode for application/json ContentType.
type ResendCodeJSONRequestBody = ResendCodeRequest

// VerifyMFAJSONRequestBody defines body for VerifyMFA for application/json ContentType.
type VerifyMFAJSONRequestBody = VerifyMFARequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Approve or reject a transfer
	// (POST /admin/approvals/transfers)
	PostAdminApprovalsTransfers(ctx echo.Context) error
	// List audit logs
	// (GET /admin/audit-logs)
	ListAuditLogs(ctx echo.Context) error
	// Handle GMO Aozora Net Bank OAuth callback
	// (POST /admin/gmo-aozora/callback)
	HandleAozoraCallback(ctx echo.Context) error
	// Get GMO Aozora Net Bank connection status
	// (GET /admin/gmo-aozora/connect)
	GetAozoraConnectionStatus(ctx echo.Context) error
	// Revoke GMO Aozora Net Bank connection
	// (POST /admin/gmo-aozora/revoked)
	RevokeAozoraConnection(ctx echo.Context) error
	// List merchants
	// (GET /admin/merchants)
	ListMerchants(ctx echo.Context) error
	// Get merchant details
	// (GET /admin/merchants/{id})
	GetMerchant(ctx echo.Context, id int) error
	// List notifications
	// (GET /admin/notifications)
	ListNotifications(ctx echo.Context, params ListNotificationsParams) error
	// List payin file groups
	// (GET /admin/payin-file-groups)
	ListPayinFileGroups(ctx echo.Context, params ListPayinFileGroupsParams) error
	// List payin files
	// (GET /admin/payin-files)
	ListPayinFiles(ctx echo.Context, params ListPayinFilesParams) error
	// List payment providers
	// (GET /admin/payment-providers)
	ListPaymentProviders(ctx echo.Context, params ListPaymentProvidersParams) error
	// List payouts
	// (GET /admin/payouts)
	ListPayouts(ctx echo.Context) error
	// Create new payout
	// (POST /admin/payouts/create)
	CreatePayout(ctx echo.Context, params CreatePayoutParams) error
	// Delete payout
	// (DELETE /admin/payouts/{id}/delete)
	DeletePayout(ctx echo.Context, id int) error
	// Update payout
	// (PUT /admin/payouts/{id}/update)
	UpdatePayout(ctx echo.Context, id int) error
	// List paypay payin detail
	// (GET /admin/paypay-payin-details)
	ListPaypayPayinDetails(ctx echo.Context, params ListPaypayPayinDetailsParams) error
	// List paypay payin summary
	// (GET /admin/paypay-payin-summary)
	ListPaypayPayinSummary(ctx echo.Context, params ListPaypayPayinSummaryParams) error
	// List paypay payin transaction
	// (GET /admin/paypay-payin-transactions)
	ListPaypayPayinTransactions(ctx echo.Context, params ListPaypayPayinTransactionsParams) error
	// List permissions
	// (GET /admin/permissions)
	ListPermissions(ctx echo.Context) error
	// dashboard transaction
	// (GET /admin/recent-month-summary-transaction)
	GetTransactionSummary(ctx echo.Context, params GetTransactionSummaryParams) error
	// List roles
	// (GET /admin/roles)
	ListRoles(ctx echo.Context) error
	// Create new role
	// (POST /admin/roles/create)
	CreateRole(ctx echo.Context) error
	// Get role details
	// (GET /admin/roles/{id})
	GetRole(ctx echo.Context, id int) error
	// Delete role
	// (DELETE /admin/roles/{id}/delete)
	DeleteRole(ctx echo.Context, id int) error
	// Update role
	// (PUT /admin/roles/{id}/update)
	UpdateRole(ctx echo.Context, id int) error
	// List screens
	// (GET /admin/screens)
	ListScreens(ctx echo.Context) error
	// List of payment merchants review history of shop
	// (GET /admin/shop-reviews)
	ListShopReviews(ctx echo.Context, params ListShopReviewsParams) error
	// Import payment provider review CSV
	// (POST /admin/shop-reviews/review/import)
	ImportPaymentProviderReviewCSV(ctx echo.Context) error
	// List transfer requests
	// (GET /admin/transactions/transfer-requests)
	ListTransferRequests(ctx echo.Context, params ListTransferRequestsParams) error
	// List transfer transactions by payout
	// (GET /admin/transactions/transfers/{payoutId})
	ListTransferTransactions(ctx echo.Context, payoutId int, params ListTransferTransactionsParams) error
	// Get transaction detail
	// (GET /admin/transactions/{id})
	GetTransactionDetail(ctx echo.Context, id int64) error
	// List users
	// (GET /admin/users)
	ListUsers(ctx echo.Context) error
	// Create new user
	// (POST /admin/users/create)
	CreateUser(ctx echo.Context) error
	// Get user details
	// (GET /admin/users/{id})
	GetUser(ctx echo.Context, id int) error
	// Delete user
	// (DELETE /admin/users/{id}/delete)
	DeleteUser(ctx echo.Context, id int) error
	// Update user
	// (PUT /admin/users/{id}/update)
	UpdateUser(ctx echo.Context, id int) error
	// List virtual accounts
	// (GET /admin/virtual-accounts)
	ListVirtualAccounts(ctx echo.Context, params ListVirtualAccountsParams) error
	// Create new virtual account
	// (POST /admin/virtual-accounts/create)
	CreateVirtualAccount(ctx echo.Context) error
	// Update virtual account
	// (PUT /admin/virtual-accounts/{id}/update)
	UpdateVirtualAccount(ctx echo.Context, id int) error
	// Login user
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Logout user
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// Get current user
	// (GET /auth/me)
	GetCurrentUser(ctx echo.Context) error
	// Resend MFA code
	// (POST /auth/resend-code)
	ResendCode(ctx echo.Context) error
	// Verify MFA token
	// (POST /auth/verify)
	VerifyMFA(ctx echo.Context) error
	// Internal schema references (not for actual use)
	// (GET /internal/schema-references)
	InternalSchemaReferences(ctx echo.Context) error
	// Handle GMO Aozora Net Bank OAuth callback
	// (POST /webhook/gmo-aozora/incoming)
	HandleAozoraWebhookIncoming(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAdminApprovalsTransfers converts echo context to params.
func (w *ServerInterfaceWrapper) PostAdminApprovalsTransfers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAdminApprovalsTransfers(ctx)
	return err
}

// ListAuditLogs converts echo context to params.
func (w *ServerInterfaceWrapper) ListAuditLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAuditLogs(ctx)
	return err
}

// HandleAozoraCallback converts echo context to params.
func (w *ServerInterfaceWrapper) HandleAozoraCallback(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleAozoraCallback(ctx)
	return err
}

// GetAozoraConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetAozoraConnectionStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAozoraConnectionStatus(ctx)
	return err
}

// RevokeAozoraConnection converts echo context to params.
func (w *ServerInterfaceWrapper) RevokeAozoraConnection(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RevokeAozoraConnection(ctx)
	return err
}

// ListMerchants converts echo context to params.
func (w *ServerInterfaceWrapper) ListMerchants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMerchants(ctx)
	return err
}

// GetMerchant converts echo context to params.
func (w *ServerInterfaceWrapper) GetMerchant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMerchant(ctx, id)
	return err
}

// ListNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) ListNotifications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListNotifications(ctx, params)
	return err
}

// ListPayinFileGroups converts echo context to params.
func (w *ServerInterfaceWrapper) ListPayinFileGroups(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPayinFileGroupsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "created_at_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_at_from", ctx.QueryParams(), &params.CreatedAtFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_at_from: %s", err))
	}

	// ------------- Optional query parameter "created_at_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_at_to", ctx.QueryParams(), &params.CreatedAtTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_at_to: %s", err))
	}

	// ------------- Optional query parameter "import_target_date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_target_date_from", ctx.QueryParams(), &params.ImportTargetDateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter import_target_date_from: %s", err))
	}

	// ------------- Optional query parameter "import_target_date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_target_date_to", ctx.QueryParams(), &params.ImportTargetDateTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter import_target_date_to: %s", err))
	}

	// ------------- Optional query parameter "is_imported_manual" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_imported_manual", ctx.QueryParams(), &params.IsImportedManual)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_imported_manual: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPayinFileGroups(ctx, params)
	return err
}

// ListPayinFiles converts echo context to params.
func (w *ServerInterfaceWrapper) ListPayinFiles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPayinFilesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "created_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_at", ctx.QueryParams(), &params.CreatedAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_at: %s", err))
	}

	// ------------- Optional query parameter "payin_file_group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "payin_file_group_id", ctx.QueryParams(), &params.PayinFileGroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payin_file_group_id: %s", err))
	}

	// ------------- Optional query parameter "payin_file_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "payin_file_type", ctx.QueryParams(), &params.PayinFileType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payin_file_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPayinFiles(ctx, params)
	return err
}

// ListPaymentProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ListPaymentProviders(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaymentProvidersParams
	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPaymentProviders(ctx, params)
	return err
}

// ListPayouts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPayouts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPayouts(ctx)
	return err
}

// CreatePayout converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePayout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePayoutParams
	// ------------- Required query parameter "transaction_ids" -------------

	err = runtime.BindQueryParameter("form", true, true, "transaction_ids", ctx.QueryParams(), &params.TransactionIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_ids: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePayout(ctx, params)
	return err
}

// DeletePayout converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayout(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePayout(ctx, id)
	return err
}

// UpdatePayout converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePayout(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePayout(ctx, id)
	return err
}

// ListPaypayPayinDetails converts echo context to params.
func (w *ServerInterfaceWrapper) ListPaypayPayinDetails(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaypayPayinDetailsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPaypayPayinDetails(ctx, params)
	return err
}

// ListPaypayPayinSummary converts echo context to params.
func (w *ServerInterfaceWrapper) ListPaypayPayinSummary(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaypayPayinSummaryParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPaypayPayinSummary(ctx, params)
	return err
}

// ListPaypayPayinTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) ListPaypayPayinTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaypayPayinTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPaypayPayinTransactions(ctx, params)
	return err
}

// ListPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) ListPermissions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPermissions(ctx)
	return err
}

// GetTransactionSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionSummary(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionSummaryParams
	// ------------- Optional query parameter "number_recent_months" -------------

	err = runtime.BindQueryParameter("form", true, false, "number_recent_months", ctx.QueryParams(), &params.NumberRecentMonths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number_recent_months: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionSummary(ctx, params)
	return err
}

// ListRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListRoles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRoles(ctx)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// GetRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRole(ctx, id)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRole(ctx, id)
	return err
}

// UpdateRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRole(ctx, id)
	return err
}

// ListScreens converts echo context to params.
func (w *ServerInterfaceWrapper) ListScreens(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListScreens(ctx)
	return err
}

// ListShopReviews converts echo context to params.
func (w *ServerInterfaceWrapper) ListShopReviews(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListShopReviewsParams
	// ------------- Required query parameter "ShopReviewListRequest" -------------

	err = runtime.BindQueryParameter("form", true, true, "ShopReviewListRequest", ctx.QueryParams(), &params.ShopReviewListRequest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ShopReviewListRequest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListShopReviews(ctx, params)
	return err
}

// ImportPaymentProviderReviewCSV converts echo context to params.
func (w *ServerInterfaceWrapper) ImportPaymentProviderReviewCSV(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImportPaymentProviderReviewCSV(ctx)
	return err
}

// ListTransferRequests converts echo context to params.
func (w *ServerInterfaceWrapper) ListTransferRequests(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransferRequestsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "reconciliation_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "reconciliation_filters", ctx.QueryParams(), &params.ReconciliationFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reconciliation_filters: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTransferRequests(ctx, params)
	return err
}

// ListTransferTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) ListTransferTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "payoutId" -------------
	var payoutId int

	err = runtime.BindStyledParameterWithOptions("simple", "payoutId", ctx.Param("payoutId"), &payoutId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payoutId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransferTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTransferTransactions(ctx, payoutId, params)
	return err
}

// GetTransactionDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionDetail(ctx, id)
	return err
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// ListVirtualAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) ListVirtualAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListVirtualAccountsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", ctx.QueryParams(), &params.SortField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_field: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "created_at_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_at_from", ctx.QueryParams(), &params.CreatedAtFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_at_from: %s", err))
	}

	// ------------- Optional query parameter "created_at_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_at_to", ctx.QueryParams(), &params.CreatedAtTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_at_to: %s", err))
	}

	// ------------- Optional query parameter "payment_provider_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "payment_provider_id", ctx.QueryParams(), &params.PaymentProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payment_provider_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListVirtualAccounts(ctx, params)
	return err
}

// CreateVirtualAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVirtualAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVirtualAccount(ctx)
	return err
}

// UpdateVirtualAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVirtualAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateVirtualAccount(ctx, id)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// ResendCode converts echo context to params.
func (w *ServerInterfaceWrapper) ResendCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResendCode(ctx)
	return err
}

// VerifyMFA converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyMFA(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyMFA(ctx)
	return err
}

// InternalSchemaReferences converts echo context to params.
func (w *ServerInterfaceWrapper) InternalSchemaReferences(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InternalSchemaReferences(ctx)
	return err
}

// HandleAozoraWebhookIncoming converts echo context to params.
func (w *ServerInterfaceWrapper) HandleAozoraWebhookIncoming(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleAozoraWebhookIncoming(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/admin/approvals/transfers", wrapper.PostAdminApprovalsTransfers)
	router.GET(baseURL+"/admin/audit-logs", wrapper.ListAuditLogs)
	router.POST(baseURL+"/admin/gmo-aozora/callback", wrapper.HandleAozoraCallback)
	router.GET(baseURL+"/admin/gmo-aozora/connect", wrapper.GetAozoraConnectionStatus)
	router.POST(baseURL+"/admin/gmo-aozora/revoked", wrapper.RevokeAozoraConnection)
	router.GET(baseURL+"/admin/merchants", wrapper.ListMerchants)
	router.GET(baseURL+"/admin/merchants/:id", wrapper.GetMerchant)
	router.GET(baseURL+"/admin/notifications", wrapper.ListNotifications)
	router.GET(baseURL+"/admin/payin-file-groups", wrapper.ListPayinFileGroups)
	router.GET(baseURL+"/admin/payin-files", wrapper.ListPayinFiles)
	router.GET(baseURL+"/admin/payment-providers", wrapper.ListPaymentProviders)
	router.GET(baseURL+"/admin/payouts", wrapper.ListPayouts)
	router.POST(baseURL+"/admin/payouts/create", wrapper.CreatePayout)
	router.DELETE(baseURL+"/admin/payouts/:id/delete", wrapper.DeletePayout)
	router.PUT(baseURL+"/admin/payouts/:id/update", wrapper.UpdatePayout)
	router.GET(baseURL+"/admin/paypay-payin-details", wrapper.ListPaypayPayinDetails)
	router.GET(baseURL+"/admin/paypay-payin-summary", wrapper.ListPaypayPayinSummary)
	router.GET(baseURL+"/admin/paypay-payin-transactions", wrapper.ListPaypayPayinTransactions)
	router.GET(baseURL+"/admin/permissions", wrapper.ListPermissions)
	router.GET(baseURL+"/admin/recent-month-summary-transaction", wrapper.GetTransactionSummary)
	router.GET(baseURL+"/admin/roles", wrapper.ListRoles)
	router.POST(baseURL+"/admin/roles/create", wrapper.CreateRole)
	router.GET(baseURL+"/admin/roles/:id", wrapper.GetRole)
	router.DELETE(baseURL+"/admin/roles/:id/delete", wrapper.DeleteRole)
	router.PUT(baseURL+"/admin/roles/:id/update", wrapper.UpdateRole)
	router.GET(baseURL+"/admin/screens", wrapper.ListScreens)
	router.GET(baseURL+"/admin/shop-reviews", wrapper.ListShopReviews)
	router.POST(baseURL+"/admin/shop-reviews/review/import", wrapper.ImportPaymentProviderReviewCSV)
	router.GET(baseURL+"/admin/transactions/transfer-requests", wrapper.ListTransferRequests)
	router.GET(baseURL+"/admin/transactions/transfers/:payoutId", wrapper.ListTransferTransactions)
	router.GET(baseURL+"/admin/transactions/:id", wrapper.GetTransactionDetail)
	router.GET(baseURL+"/admin/users", wrapper.ListUsers)
	router.POST(baseURL+"/admin/users/create", wrapper.CreateUser)
	router.GET(baseURL+"/admin/users/:id", wrapper.GetUser)
	router.DELETE(baseURL+"/admin/users/:id/delete", wrapper.DeleteUser)
	router.PUT(baseURL+"/admin/users/:id/update", wrapper.UpdateUser)
	router.GET(baseURL+"/admin/virtual-accounts", wrapper.ListVirtualAccounts)
	router.POST(baseURL+"/admin/virtual-accounts/create", wrapper.CreateVirtualAccount)
	router.PUT(baseURL+"/admin/virtual-accounts/:id/update", wrapper.UpdateVirtualAccount)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.GET(baseURL+"/auth/me", wrapper.GetCurrentUser)
	router.POST(baseURL+"/auth/resend-code", wrapper.ResendCode)
	router.POST(baseURL+"/auth/verify", wrapper.VerifyMFA)
	router.GET(baseURL+"/internal/schema-references", wrapper.InternalSchemaReferences)
	router.POST(baseURL+"/webhook/gmo-aozora/incoming", wrapper.HandleAozoraWebhookIncoming)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
